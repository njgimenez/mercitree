{"ast":null,"code":"var _jsxFileName = \"/home/devdisnovo/Documentos/PROYECTOS/merci/client/src/components/TreeVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeVisualization = ({\n  votos\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n\n  // Función para dibujar hoja SVG\n  const drawLeaf = (ctx, x, y, size, angle, color) => {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle);\n    ctx.scale(size / 76, size / 76); // Escalar basado en el viewBox del SVG\n\n    // Dibujar la forma de la hoja usando el path del SVG\n    ctx.fillStyle = color;\n    ctx.beginPath();\n\n    // Path del SVG convertido a coordenadas de canvas\n    ctx.moveTo(57, 22.1667);\n    ctx.bezierCurveTo(49.0833, 28.5, 52.25, 31.6667, 50.6667, 36.4167);\n    ctx.bezierCurveTo(49.0833, 41.1667, 50.6667, 42.75, 44.3333, 47.5);\n    ctx.bezierCurveTo(36.2227, 53.583, 29.2917, 49.875, 29.2917, 49.875);\n    ctx.bezierCurveTo(27.7083, 51.4583, 21.7708, 54.2292, 21.7708, 54.2292);\n    ctx.lineTo(20.0143, 50.7285);\n    ctx.bezierCurveTo(26.3476, 49.1452, 27.7083, 47.1042, 27.7083, 47.1042);\n    ctx.bezierCurveTo(26.125, 43.9375, 23.75, 38, 28.5, 30.0833);\n    ctx.bezierCurveTo(33.25, 22.1667, 57, 22.1667, 57, 22.1667);\n    ctx.closePath();\n    ctx.fill();\n\n    // Agregar sombra interna para dar profundidad\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.beginPath();\n    ctx.moveTo(30.0833, 44.3333);\n    ctx.lineTo(31.6667, 45.9167);\n    ctx.lineTo(31.6667, 45.9167);\n    ctx.bezierCurveTo(34.8333, 44.3333, 36.4167, 39.5833, 36.4167, 39.5833);\n    ctx.bezierCurveTo(38, 34.8333, 45.9167, 26.9167, 45.9167, 26.9167);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n  };\n\n  // Variables globales del componente\n  const width = 1000;\n  const height = 625;\n  const isMobile = window.innerWidth <= 768;\n  const treeImage = new window.Image();\n  treeImage.src = '/arbol.png';\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Configurar canvas\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    // const width = canvas.width; // Moved to global scope\n    // const height = canvas.height; // Moved to global scope\n\n    // Limpiar canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Dibujar cielo con gradiente más suave\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height * 0.7);\n    skyGradient.addColorStop(0, '#87CEEB');\n    skyGradient.addColorStop(0.5, '#B0E0E6');\n    skyGradient.addColorStop(1, '#98FB98');\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Dibujar suelo\n    const groundGradient = ctx.createLinearGradient(0, height * 0.7, 0, height);\n    groundGradient.addColorStop(0, '#98FB98');\n    groundGradient.addColorStop(1, '#228B22');\n    ctx.fillStyle = groundGradient;\n    ctx.fillRect(0, height * 0.7, width, height * 0.3);\n\n    // Cargar y dibujar imágenes de nubes decorativas (detrás del árbol)\n    const nube1Image = new Image();\n    const nube2Image = new Image();\n    let nubesLoaded = 0;\n    const drawClouds = () => {\n      // Nube izquierda - ampliada y manteniendo proporción original\n      const nube1Width = isMobile ? 140 : 300;\n      const nube1Height = isMobile ? 80 : 120; // Mantener proporción original\n      const nube1X = width * 0.08;\n      const nube1Y = height * 0.06;\n      ctx.drawImage(nube1Image, nube1X, nube1Y, nube1Width, nube1Height);\n\n      // Nube derecha - ampliada y manteniendo proporción original\n      const nube2Width = isMobile ? 120 : 300;\n      const nube2Height = isMobile ? 70 : 120; // Mantener proporción original\n      const nube2X = width * 0.75;\n      const nube2Y = height * 0.13;\n      ctx.drawImage(nube2Image, nube2X, nube2Y, nube2Width, nube2Height);\n    };\n    const checkAndDrawClouds = () => {\n      nubesLoaded++;\n      if (nubesLoaded === 2) {\n        drawClouds();\n      }\n    };\n    nube1Image.onload = checkAndDrawClouds;\n    nube2Image.onload = checkAndDrawClouds;\n    nube1Image.onerror = () => {\n      console.log('Error cargando nube1.png');\n      nubesLoaded++;\n    };\n    nube2Image.onerror = () => {\n      console.log('Error cargando nube2.png');\n      nubesLoaded++;\n    };\n    nube1Image.src = '/nube1.png';\n    nube2Image.src = '/nube2.png';\n\n    // Cargar y dibujar la imagen del árbol\n    treeImage.onload = () => {\n      // Restaurar tamaño y posición exactos del árbol\n      ctx.drawImage(treeImage, width * 0.35, height * 0.25, 298, 468);\n      // Después de dibujar el árbol, dibujar las hojas\n      drawLeavesAfterTree();\n    };\n\n    // Función para dibujar las hojas después de que se carga el árbol\n    const drawLeavesAfterTree = () => {\n      const total = votos.length;\n      const centerX = width / 2;\n      const centerY = isMobile ? height * 0.43 : height * 0.43;\n      const baseRadius = (isMobile ? 90 : 170) * 1.60;\n      votos.forEach((voto, index) => {\n        // Espiral de Fibonacci con variación determinística\n        const angle = index * 2.39996;\n        const radius = Math.sqrt(index / total) * baseRadius * (0.85 + 0.3 * Math.abs(Math.sin(index)));\n        // Variación aleatoria determinística\n        const randomAngle = (Math.sin(index * 12.9898 + 78.233) * 43758.5453 % 1 - 0.5) * 0.7;\n        const randomRadius = (Math.sin(index * 92.9898 + 78.233) * 43758.5453 % 1 - 0.5) * 18;\n        const leafX = centerX + Math.cos(angle + randomAngle) * (radius + randomRadius);\n        const leafY = centerY + Math.sin(angle + randomAngle) * (radius + randomRadius) * 0.8;\n        // Tamaño y ángulo\n        const leafSize = (isMobile ? 38 : 60) * 2;\n        const leafAngle = angle + randomAngle + Math.PI / 2;\n        const leafColor = voto.prediccion === 'varon' ? '#3B82F6' : '#EC4899';\n        const shadowColor = voto.prediccion === 'varon' ? '#1E40AF' : '#BE185D';\n        // Sombra\n        drawLeaf(ctx, leafX + 4, leafY + 4, leafSize + 6, leafAngle, shadowColor + '55');\n        // Hoja principal\n        drawLeaf(ctx, leafX, leafY, leafSize, leafAngle, leafColor);\n        // Hoja pequeña encima\n        const smallLeafSize = leafSize * 0.6;\n        const smallLeafColor = voto.prediccion === 'varon' ? '#60A5FA' : '#F472B6';\n        drawLeaf(ctx, leafX, leafY, smallLeafSize, leafAngle + 0.3, smallLeafColor);\n      });\n    };\n\n    // Intentar cargar la imagen del árbol, si no existe usar el árbol dibujado\n    treeImage.onerror = () => {\n      // Si no se puede cargar la imagen, dibujar el árbol original\n      drawOriginalTree();\n      drawLeavesAfterTree();\n    };\n\n    // treeImage.src = '/arbol.png'; // Moved to global scope\n\n    // Función para dibujar el árbol original si no hay imagen\n    const drawOriginalTree = () => {\n      // Dibujar tronco del árbol con gradiente hasta el borde inferior\n      const trunkGradient = ctx.createLinearGradient(width / 2 - 25, height - 280, width / 2 + 25, height - 280);\n      trunkGradient.addColorStop(0, '#8B4513');\n      trunkGradient.addColorStop(0.5, '#A0522D');\n      trunkGradient.addColorStop(1, '#8B4513');\n      ctx.fillStyle = trunkGradient;\n      // Extender el tronco hasta el borde inferior exacto\n      const trunkHeight = isMobile ? 400 : 500;\n      const trunkY = height - trunkHeight;\n      ctx.fillRect(width / 2 - 25, trunkY, 50, trunkHeight);\n\n      // Dibujar ramas principales con mejor distribución\n      ctx.strokeStyle = '#654321';\n      ctx.lineWidth = 10;\n      ctx.lineCap = 'round';\n\n      // Posiciones base para las ramas (ajustadas para tronco hasta el borde)\n      const branchBaseY = isMobile ? height - 350 : height - 450;\n      const branchMidY = isMobile ? height - 380 : height - 480;\n      const branchEndY = isMobile ? height - 400 : height - 500;\n      const branchSecY = isMobile ? height - 370 : height - 470;\n      const branchSecMidY = isMobile ? height - 390 : height - 490;\n      const branchSecEndY = isMobile ? height - 410 : height - 510;\n      const branchTopY = isMobile ? height - 360 : height - 460;\n      const branchTopMidY = isMobile ? height - 400 : height - 500;\n      const branchTopEndY = isMobile ? height - 440 : height - 540;\n\n      // Rama izquierda principal\n      ctx.beginPath();\n      ctx.moveTo(width / 2 - 15, branchBaseY);\n      ctx.quadraticCurveTo(width / 2 - 60, branchMidY, width / 2 - 100, branchEndY);\n      ctx.stroke();\n\n      // Rama derecha principal\n      ctx.beginPath();\n      ctx.moveTo(width / 2 + 15, branchBaseY);\n      ctx.quadraticCurveTo(width / 2 + 60, branchMidY, width / 2 + 100, branchEndY);\n      ctx.stroke();\n\n      // Ramas secundarias izquierdas\n      ctx.lineWidth = 6;\n      ctx.beginPath();\n      ctx.moveTo(width / 2 - 8, branchSecY);\n      ctx.quadraticCurveTo(width / 2 - 40, branchSecMidY, width / 2 - 70, branchSecEndY);\n      ctx.stroke();\n\n      // Ramas secundarias derechas\n      ctx.beginPath();\n      ctx.moveTo(width / 2 + 8, branchSecY);\n      ctx.quadraticCurveTo(width / 2 + 40, branchSecMidY, width / 2 + 70, branchSecEndY);\n      ctx.stroke();\n\n      // Ramas superiores\n      ctx.lineWidth = 4;\n      ctx.beginPath();\n      ctx.moveTo(width / 2, branchTopY);\n      ctx.quadraticCurveTo(width / 2 - 30, branchTopMidY, width / 2 - 50, branchTopEndY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(width / 2, branchTopY);\n      ctx.quadraticCurveTo(width / 2 + 30, branchTopMidY, width / 2 + 50, branchTopEndY);\n      ctx.stroke();\n    };\n\n    // Dibuja la leyenda dentro del canvas, esquina inferior izquierda\n    const drawLegend = () => {\n      const legendX = 30;\n      const legendY = height - 150;\n      ctx.save();\n      ctx.globalAlpha = 0.95;\n      ctx.fillStyle = '#fff';\n      ctx.strokeStyle = '#e5e7eb';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.roundRect(legendX, legendY, 170, 110, 18);\n      ctx.fill();\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n      ctx.font = 'bold 20px Poppins, Arial';\n      ctx.fillStyle = '#222';\n      ctx.fillText('Leyenda', legendX + 18, legendY + 32);\n      ctx.font = '16px Poppins, Arial';\n      ctx.fillStyle = '#2563eb';\n      ctx.beginPath();\n      ctx.arc(legendX + 25, legendY + 55, 8, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = '#222';\n      ctx.fillText('Niño', legendX + 45, legendY + 60);\n      ctx.fillStyle = '#db2777';\n      ctx.beginPath();\n      ctx.arc(legendX + 25, legendY + 80, 8, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = '#222';\n      ctx.fillText('Niña', legendX + 45, legendY + 85);\n      ctx.font = 'bold 18px Poppins, Arial';\n      ctx.fillStyle = '#4caf50';\n      ctx.fillText('🌿 ' + votos.length, legendX + 18, legendY + 108);\n      ctx.restore();\n    };\n  }, [votos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arbol-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 625,\n      style: {\n        background: 'transparent',\n        display: 'block',\n        margin: '0 auto',\n        borderRadius: '18px',\n        boxShadow: '0 4px 32px #0002'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualization, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = TreeVisualization;\nexport default TreeVisualization;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","TreeVisualization","votos","_s","canvasRef","drawLeaf","ctx","x","y","size","angle","color","save","translate","rotate","scale","fillStyle","beginPath","moveTo","bezierCurveTo","lineTo","closePath","fill","restore","width","height","isMobile","window","innerWidth","treeImage","Image","src","canvas","current","getContext","offsetWidth","offsetHeight","clearRect","skyGradient","createLinearGradient","addColorStop","fillRect","groundGradient","nube1Image","nube2Image","nubesLoaded","drawClouds","nube1Width","nube1Height","nube1X","nube1Y","drawImage","nube2Width","nube2Height","nube2X","nube2Y","checkAndDrawClouds","onload","onerror","console","log","drawLeavesAfterTree","total","length","centerX","centerY","baseRadius","forEach","voto","index","radius","Math","sqrt","abs","sin","randomAngle","randomRadius","leafX","cos","leafY","leafSize","leafAngle","PI","leafColor","prediccion","shadowColor","smallLeafSize","smallLeafColor","drawOriginalTree","trunkGradient","trunkHeight","trunkY","strokeStyle","lineWidth","lineCap","branchBaseY","branchMidY","branchEndY","branchSecY","branchSecMidY","branchSecEndY","branchTopY","branchTopMidY","branchTopEndY","quadraticCurveTo","stroke","drawLegend","legendX","legendY","globalAlpha","roundRect","font","fillText","arc","className","children","ref","style","background","display","margin","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/devdisnovo/Documentos/PROYECTOS/merci/client/src/components/TreeVisualization.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\ninterface Voto {\n  id: number;\n  nombre: string;\n  prediccion: 'varon' | 'nina';\n  pais?: string;\n  comentario?: string;\n  foto_url?: string;\n  fecha_voto: string;\n}\n\ninterface TreeVisualizationProps {\n  votos: Voto[];\n}\n\nconst TreeVisualization: React.FC<TreeVisualizationProps> = ({ votos }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Función para dibujar hoja SVG\n  const drawLeaf = (ctx: CanvasRenderingContext2D, x: number, y: number, size: number, angle: number, color: string) => {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle);\n    ctx.scale(size / 76, size / 76); // Escalar basado en el viewBox del SVG\n\n    // Dibujar la forma de la hoja usando el path del SVG\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    \n    // Path del SVG convertido a coordenadas de canvas\n    ctx.moveTo(57, 22.1667);\n    ctx.bezierCurveTo(49.0833, 28.5, 52.25, 31.6667, 50.6667, 36.4167);\n    ctx.bezierCurveTo(49.0833, 41.1667, 50.6667, 42.75, 44.3333, 47.5);\n    ctx.bezierCurveTo(36.2227, 53.583, 29.2917, 49.875, 29.2917, 49.875);\n    ctx.bezierCurveTo(27.7083, 51.4583, 21.7708, 54.2292, 21.7708, 54.2292);\n    ctx.lineTo(20.0143, 50.7285);\n    ctx.bezierCurveTo(26.3476, 49.1452, 27.7083, 47.1042, 27.7083, 47.1042);\n    ctx.bezierCurveTo(26.125, 43.9375, 23.75, 38, 28.5, 30.0833);\n    ctx.bezierCurveTo(33.25, 22.1667, 57, 22.1667, 57, 22.1667);\n    ctx.closePath();\n    ctx.fill();\n\n    // Agregar sombra interna para dar profundidad\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.beginPath();\n    ctx.moveTo(30.0833, 44.3333);\n    ctx.lineTo(31.6667, 45.9167);\n    ctx.lineTo(31.6667, 45.9167);\n    ctx.bezierCurveTo(34.8333, 44.3333, 36.4167, 39.5833, 36.4167, 39.5833);\n    ctx.bezierCurveTo(38, 34.8333, 45.9167, 26.9167, 45.9167, 26.9167);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  // Variables globales del componente\n  const width = 1000;\n  const height = 625;\n  const isMobile = window.innerWidth <= 768;\n  const treeImage = new window.Image();\n  treeImage.src = '/arbol.png';\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Configurar canvas\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    // const width = canvas.width; // Moved to global scope\n    // const height = canvas.height; // Moved to global scope\n\n    // Limpiar canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Dibujar cielo con gradiente más suave\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height * 0.7);\n    skyGradient.addColorStop(0, '#87CEEB');\n    skyGradient.addColorStop(0.5, '#B0E0E6');\n    skyGradient.addColorStop(1, '#98FB98');\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Dibujar suelo\n    const groundGradient = ctx.createLinearGradient(0, height * 0.7, 0, height);\n    groundGradient.addColorStop(0, '#98FB98');\n    groundGradient.addColorStop(1, '#228B22');\n    ctx.fillStyle = groundGradient;\n    ctx.fillRect(0, height * 0.7, width, height * 0.3);\n\n    // Cargar y dibujar imágenes de nubes decorativas (detrás del árbol)\n    const nube1Image = new Image();\n    const nube2Image = new Image();\n    \n    let nubesLoaded = 0;\n    \n    const drawClouds = () => {\n      // Nube izquierda - ampliada y manteniendo proporción original\n      const nube1Width = isMobile ? 140 : 300;\n      const nube1Height = isMobile ? 80 : 120; // Mantener proporción original\n      const nube1X = width * 0.08;\n      const nube1Y = height * 0.06;\n      ctx.drawImage(nube1Image, nube1X, nube1Y, nube1Width, nube1Height);\n      \n      // Nube derecha - ampliada y manteniendo proporción original\n      const nube2Width = isMobile ? 120 : 300;\n      const nube2Height = isMobile ? 70 : 120; // Mantener proporción original\n      const nube2X = width * 0.75;\n      const nube2Y = height * 0.13;\n      ctx.drawImage(nube2Image, nube2X, nube2Y, nube2Width, nube2Height);\n    };\n    \n    const checkAndDrawClouds = () => {\n      nubesLoaded++;\n      if (nubesLoaded === 2) {\n        drawClouds();\n      }\n    };\n    \n    nube1Image.onload = checkAndDrawClouds;\n    nube2Image.onload = checkAndDrawClouds;\n    \n    nube1Image.onerror = () => {\n      console.log('Error cargando nube1.png');\n      nubesLoaded++;\n    };\n    \n    nube2Image.onerror = () => {\n      console.log('Error cargando nube2.png');\n      nubesLoaded++;\n    };\n    \n    nube1Image.src = '/nube1.png';\n    nube2Image.src = '/nube2.png';\n\n    // Cargar y dibujar la imagen del árbol\n    treeImage.onload = () => {\n      // Restaurar tamaño y posición exactos del árbol\n      ctx.drawImage(treeImage, width*0.35, height*0.25, 298, 468);\n      // Después de dibujar el árbol, dibujar las hojas\n      drawLeavesAfterTree();\n    };\n\n    // Función para dibujar las hojas después de que se carga el árbol\n    const drawLeavesAfterTree = () => {\n      const total = votos.length;\n      const centerX = width / 2;\n      const centerY = isMobile ? height * 0.43 : height * 0.43;\n      const baseRadius = (isMobile ? 90 : 170) * 1.60;\n\n      votos.forEach((voto, index) => {\n        // Espiral de Fibonacci con variación determinística\n        const angle = index * 2.39996;\n        const radius = Math.sqrt(index / total) * baseRadius * (0.85 + 0.3 * Math.abs(Math.sin(index)));\n        // Variación aleatoria determinística\n        const randomAngle = ((Math.sin(index * 12.9898 + 78.233) * 43758.5453) % 1 - 0.5) * 0.7;\n        const randomRadius = ((Math.sin(index * 92.9898 + 78.233) * 43758.5453) % 1 - 0.5) * 18;\n        const leafX = centerX + Math.cos(angle + randomAngle) * (radius + randomRadius);\n        const leafY = centerY + Math.sin(angle + randomAngle) * (radius + randomRadius) * 0.8;\n        // Tamaño y ángulo\n        const leafSize = (isMobile ? 38 : 60) * 2;\n        const leafAngle = angle + randomAngle + Math.PI / 2;\n        const leafColor = voto.prediccion === 'varon' ? '#3B82F6' : '#EC4899';\n        const shadowColor = voto.prediccion === 'varon' ? '#1E40AF' : '#BE185D';\n        // Sombra\n        drawLeaf(ctx, leafX + 4, leafY + 4, leafSize + 6, leafAngle, shadowColor + '55');\n        // Hoja principal\n        drawLeaf(ctx, leafX, leafY, leafSize, leafAngle, leafColor);\n        // Hoja pequeña encima\n        const smallLeafSize = leafSize * 0.6;\n        const smallLeafColor = voto.prediccion === 'varon' ? '#60A5FA' : '#F472B6';\n        drawLeaf(ctx, leafX, leafY, smallLeafSize, leafAngle + 0.3, smallLeafColor);\n      });\n    };\n    \n    // Intentar cargar la imagen del árbol, si no existe usar el árbol dibujado\n    treeImage.onerror = () => {\n      // Si no se puede cargar la imagen, dibujar el árbol original\n      drawOriginalTree();\n      drawLeavesAfterTree();\n    };\n    \n    // treeImage.src = '/arbol.png'; // Moved to global scope\n    \n    // Función para dibujar el árbol original si no hay imagen\n    const drawOriginalTree = () => {\n      // Dibujar tronco del árbol con gradiente hasta el borde inferior\n      const trunkGradient = ctx.createLinearGradient(width / 2 - 25, height - 280, width / 2 + 25, height - 280);\n      trunkGradient.addColorStop(0, '#8B4513');\n      trunkGradient.addColorStop(0.5, '#A0522D');\n      trunkGradient.addColorStop(1, '#8B4513');\n      ctx.fillStyle = trunkGradient;\n      // Extender el tronco hasta el borde inferior exacto\n      const trunkHeight = isMobile ? 400 : 500;\n      const trunkY = height - trunkHeight;\n      ctx.fillRect(width / 2 - 25, trunkY, 50, trunkHeight);\n\n      // Dibujar ramas principales con mejor distribución\n      ctx.strokeStyle = '#654321';\n      ctx.lineWidth = 10;\n      ctx.lineCap = 'round';\n      \n      // Posiciones base para las ramas (ajustadas para tronco hasta el borde)\n      const branchBaseY = isMobile ? (height - 350) : (height - 450);\n      const branchMidY = isMobile ? (height - 380) : (height - 480);\n      const branchEndY = isMobile ? (height - 400) : (height - 500);\n      const branchSecY = isMobile ? (height - 370) : (height - 470);\n      const branchSecMidY = isMobile ? (height - 390) : (height - 490);\n      const branchSecEndY = isMobile ? (height - 410) : (height - 510);\n      const branchTopY = isMobile ? (height - 360) : (height - 460);\n      const branchTopMidY = isMobile ? (height - 400) : (height - 500);\n      const branchTopEndY = isMobile ? (height - 440) : (height - 540);\n      \n      // Rama izquierda principal\n      ctx.beginPath();\n      ctx.moveTo(width / 2 - 15, branchBaseY);\n      ctx.quadraticCurveTo(width / 2 - 60, branchMidY, width / 2 - 100, branchEndY);\n      ctx.stroke();\n      \n      // Rama derecha principal\n      ctx.beginPath();\n      ctx.moveTo(width / 2 + 15, branchBaseY);\n      ctx.quadraticCurveTo(width / 2 + 60, branchMidY, width / 2 + 100, branchEndY);\n      ctx.stroke();\n      \n      // Ramas secundarias izquierdas\n      ctx.lineWidth = 6;\n      ctx.beginPath();\n      ctx.moveTo(width / 2 - 8, branchSecY);\n      ctx.quadraticCurveTo(width / 2 - 40, branchSecMidY, width / 2 - 70, branchSecEndY);\n      ctx.stroke();\n      \n      // Ramas secundarias derechas\n      ctx.beginPath();\n      ctx.moveTo(width / 2 + 8, branchSecY);\n      ctx.quadraticCurveTo(width / 2 + 40, branchSecMidY, width / 2 + 70, branchSecEndY);\n      ctx.stroke();\n      \n      // Ramas superiores\n      ctx.lineWidth = 4;\n      ctx.beginPath();\n      ctx.moveTo(width / 2, branchTopY);\n      ctx.quadraticCurveTo(width / 2 - 30, branchTopMidY, width / 2 - 50, branchTopEndY);\n      ctx.stroke();\n      \n      ctx.beginPath();\n      ctx.moveTo(width / 2, branchTopY);\n      ctx.quadraticCurveTo(width / 2 + 30, branchTopMidY, width / 2 + 50, branchTopEndY);\n      ctx.stroke();\n    };\n\n    // Dibuja la leyenda dentro del canvas, esquina inferior izquierda\n    const drawLegend = () => {\n      const legendX = 30;\n      const legendY = height - 150;\n      ctx.save();\n      ctx.globalAlpha = 0.95;\n      ctx.fillStyle = '#fff';\n      ctx.strokeStyle = '#e5e7eb';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.roundRect(legendX, legendY, 170, 110, 18);\n      ctx.fill();\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n      ctx.font = 'bold 20px Poppins, Arial';\n      ctx.fillStyle = '#222';\n      ctx.fillText('Leyenda', legendX + 18, legendY + 32);\n      ctx.font = '16px Poppins, Arial';\n      ctx.fillStyle = '#2563eb';\n      ctx.beginPath(); ctx.arc(legendX + 25, legendY + 55, 8, 0, 2 * Math.PI); ctx.fill();\n      ctx.fillStyle = '#222';\n      ctx.fillText('Niño', legendX + 45, legendY + 60);\n      ctx.fillStyle = '#db2777';\n      ctx.beginPath(); ctx.arc(legendX + 25, legendY + 80, 8, 0, 2 * Math.PI); ctx.fill();\n      ctx.fillStyle = '#222';\n      ctx.fillText('Niña', legendX + 45, legendY + 85);\n      ctx.font = 'bold 18px Poppins, Arial';\n      ctx.fillStyle = '#4caf50';\n      ctx.fillText('🌿 ' + votos.length, legendX + 18, legendY + 108);\n      ctx.restore();\n    };\n\n  }, [votos]);\n\n  return (\n    <div className=\"arbol-container\">\n      <canvas\n        ref={canvasRef}\n        width={800}\n        height={625}\n        style={{ background: 'transparent', display: 'block', margin: '0 auto', borderRadius: '18px', boxShadow: '0 4px 32px #0002' }}\n      />\n      \n      {/* Leyenda */}\n      {/* <div style={{\n        position: 'absolute',\n        bottom: '20px',\n        left: '20px',\n        background: 'rgba(255, 255, 255, 0.9)',\n        padding: '15px',\n        borderRadius: '10px',\n        backdropFilter: 'blur(10px)',\n        border: '1px solid rgba(255, 255, 255, 0.3)'\n      }}> */}\n      {/* {(!window.innerWidth || window.innerWidth > 768) && ( */}\n      {/*   <h4 style={{ margin: '0 0 10px 0', color: '#333', fontSize: '1rem' }}>Leyenda</h4> */}\n      {/* )} */}\n      {/* <div style={{ display: 'flex', flexDirection: window.innerWidth <= 768 ? 'row' : 'column', gap: '8px', alignItems: 'center' }}> */}\n      {/*   <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}> */}\n      {/*     <div style={{ width: '20px', height: '15px', backgroundColor: '#1E40AF', borderRadius: '50%' }}></div> */}\n      {/*     <span style={{ fontSize: '0.9rem', color: '#333' }}>Niño</span> */}\n      {/*   </div> */}\n      {/*   <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}> */}\n      {/*     <div style={{ width: '20px', height: '15px', backgroundColor: '#BE185D', borderRadius: '50%' }}></div> */}\n      {/*     <span style={{ fontSize: '0.9rem', color: '#333' }}>Niña</span> */}\n      {/*   </div> */}\n      {/*   <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginTop: window.innerWidth <= 768 ? '0' : '5px' }}> */}\n      {/*     <span style={{ fontSize: '1.2rem' }}>🌿</span> */}\n      {/*     <span style={{ fontSize: '0.9rem', color: '#333' }}>{votos.length}</span> */}\n      {/*   </div> */}\n      {/* </div> */}\n      {/* </div> */}\n    </div>\n  );\n};\n\nexport default TreeVisualization; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}