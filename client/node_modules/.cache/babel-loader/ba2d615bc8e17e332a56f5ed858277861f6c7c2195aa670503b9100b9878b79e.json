{"ast":null,"code":"import 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\n\n// @ts-expect-error ts being silly\nconst STANDARD_FONTS = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\nclass StandardFont {\n  name;\n  src;\n  fullName;\n  familyName;\n  subfamilyName;\n  postscriptName;\n  copyright;\n  version;\n  underlinePosition;\n  underlineThickness;\n  italicAngle;\n  bbox;\n  'OS/2';\n  hhea;\n  numGlyphs;\n  characterSet;\n  availableFeatures;\n  type;\n  constructor(src) {\n    this.name = src;\n    this.fullName = src;\n    this.familyName = src;\n    this.subfamilyName = src;\n    this.type = 'STANDARD';\n    this.postscriptName = src;\n    this.availableFeatures = [];\n    this.copyright = '';\n    this.version = 1;\n    this.underlinePosition = -100;\n    this.underlineThickness = 50;\n    this.italicAngle = 0;\n    this.bbox = {};\n    this['OS/2'] = {};\n    this.hhea = {};\n    this.numGlyphs = 0;\n    this.characterSet = [];\n    this.src = PDFFont.open(null, src);\n  }\n  encode(str) {\n    return this.src.encode(str);\n  }\n  layout(str) {\n    const [encoded, positions] = this.encode(str);\n    const glyphs = encoded.map((g, i) => {\n      const glyph = this.getGlyph(parseInt(g, 16));\n      glyph.advanceWidth = positions[i].advanceWidth;\n      return glyph;\n    });\n    const advanceWidth = positions.reduce((acc, p) => acc + p.advanceWidth, 0);\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs,\n      script: 'latin',\n      language: 'dflt',\n      direction: 'ltr',\n      features: {},\n      advanceWidth,\n      advanceHeight: 0,\n      bbox: undefined\n    };\n  }\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n  getGlyph(id) {\n    return {\n      id,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id),\n      _font: this.src,\n      // @ts-expect-error assign proper value\n      advanceWidth: undefined\n    };\n  }\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n  // Based on empirical observation\n  get ascent() {\n    return 900;\n  }\n  // Based on empirical observation\n  get capHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 650;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 550;\n      default:\n        return 690;\n    }\n  }\n  // Based on empirical observation\n  get xHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 440;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 390;\n      default:\n        return 490;\n    }\n  }\n  // Based on empirical observation\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return -220;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return -230;\n      default:\n        return -200;\n    }\n  }\n  get lineGap() {\n    return 0;\n  }\n  get unitsPerEm() {\n    return 1000;\n  }\n  stringsForGlyph() {\n    throw new Error('Method not implemented.');\n  }\n  glyphsForString() {\n    throw new Error('Method not implemented.');\n  }\n  widthOfGlyph() {\n    throw new Error('Method not implemented.');\n  }\n  getAvailableFeatures() {\n    throw new Error('Method not implemented.');\n  }\n  createSubset() {\n    throw new Error('Method not implemented.');\n  }\n  getVariation() {\n    throw new Error('Method not implemented.');\n  }\n  getFont() {\n    throw new Error('Method not implemented.');\n  }\n  getName() {\n    throw new Error('Method not implemented.');\n  }\n  setDefaultLanguage() {\n    throw new Error('Method not implemented.');\n  }\n}\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\nclass FontSource {\n  src;\n  fontFamily;\n  fontStyle;\n  fontWeight;\n  data;\n  options;\n  loadResultPromise;\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options || {};\n    this.loadResultPromise = null;\n  }\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    let data = null;\n    if (STANDARD_FONTS.includes(this.src)) {\n      data = new StandardFont(this.src);\n    } else if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const buffer = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      data = fontkit.create(buffer, postscriptName);\n    }\n    if (data && 'fonts' in data) {\n      throw new Error('Font collection is not supported');\n    }\n    this.data = data;\n  }\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n    return this.loadResultPromise;\n  }\n}\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontFamily {\n  family;\n  sources;\n  static create(family) {\n    return new FontFamily(family);\n  }\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n  register({\n    src,\n    fontWeight,\n    fontStyle,\n    ...options\n  }) {\n    const numericFontWeight = fontWeight ? resolveFontWeight(fontWeight) : undefined;\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit;\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    let font = null;\n    const numericFontWeight = resolveFontWeight(fontWeight);\n    if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= numericFontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= numericFontWeight && s.fontWeight < 500);\n      font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n    const lt = styleSources.filter(s => s.fontWeight < numericFontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > numericFontWeight).sort(sortByFontWeight);\n    if (numericFontWeight < 400) {\n      font = lt[lt.length - 1] || gt[0];\n    }\n    if (numericFontWeight > 500) {\n      font = gt[0] || lt[lt.length - 1];\n    }\n    if (!font) {\n      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}, fontStyle ${fontStyle}`);\n    }\n    return font;\n  }\n}\nclass FontStore {\n  fontFamilies = {};\n  emojiSource = null;\n  constructor() {\n    this.register({\n      family: 'Helvetica',\n      fonts: [{\n        src: 'Helvetica',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Helvetica-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Helvetica-Oblique',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Helvetica-BoldOblique',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    });\n    this.register({\n      family: 'Courier',\n      fonts: [{\n        src: 'Courier',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Courier-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Courier-Oblique',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Courier-BoldOblique',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    });\n    this.register({\n      family: 'Times-Roman',\n      fonts: [{\n        src: 'Times-Roman',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Times-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Times-Italic',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Times-BoldItalic',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    });\n    // For backwards compatibility\n    this.register({\n      family: 'Helvetica-Bold',\n      src: 'Helvetica-Bold'\n    });\n    this.register({\n      family: 'Helvetica-Oblique',\n      src: 'Helvetica-Oblique'\n    });\n    this.register({\n      family: 'Helvetica-BoldOblique',\n      src: 'Helvetica-BoldOblique'\n    });\n    this.register({\n      family: 'Courier-Bold',\n      src: 'Courier-Bold'\n    });\n    this.register({\n      family: 'Courier-Oblique',\n      src: 'Courier-Oblique'\n    });\n    this.register({\n      family: 'Courier-BoldOblique',\n      src: 'Courier-BoldOblique'\n    });\n    this.register({\n      family: 'Times-Bold',\n      src: 'Times-Bold'\n    });\n    this.register({\n      family: 'Times-Italic',\n      src: 'Times-Italic'\n    });\n    this.register({\n      family: 'Times-BoldItalic',\n      src: 'Times-BoldItalic'\n    });\n    // Load default fonts\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'normal',\n      fontWeight: 400\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'normal',\n      fontWeight: 700\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'italic',\n      fontWeight: 400\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'italic',\n      fontWeight: 700\n    });\n  }\n  hyphenationCallback = null;\n  register = data => {\n    const {\n      family\n    } = data;\n    if (!this.fontFamilies[family]) {\n      this.fontFamilies[family] = FontFamily.create(family);\n    }\n    // Bulk loading\n    if ('fonts' in data) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        const {\n          src,\n          fontStyle,\n          fontWeight,\n          ...options\n        } = data.fonts[i];\n        this.fontFamilies[family].register({\n          src,\n          fontStyle,\n          fontWeight,\n          ...options\n        });\n      }\n    } else {\n      const {\n        src,\n        fontStyle,\n        fontWeight,\n        ...options\n      } = data;\n      this.fontFamilies[family].register({\n        src,\n        fontStyle,\n        fontWeight,\n        ...options\n      });\n    }\n  };\n  registerEmojiSource = emojiSource => {\n    this.emojiSource = emojiSource;\n  };\n  registerHyphenationCallback = callback => {\n    this.hyphenationCallback = callback;\n  };\n  getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    if (!this.fontFamilies[fontFamily]) {\n      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n    }\n    return this.fontFamilies[fontFamily].resolve(descriptor);\n  };\n  load = async descriptor => {\n    const font = this.getFont(descriptor);\n    if (font) await font.load();\n  };\n  reset = () => {\n    const keys = Object.keys(this.fontFamilies);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      for (let j = 0; j < this.fontFamilies[key].sources.length; j++) {\n        const fontSource = this.fontFamilies[key].sources[j];\n        fontSource.data = null;\n      }\n    }\n  };\n  clear = () => {\n    this.fontFamilies = {};\n  };\n  getRegisteredFonts = () => this.fontFamilies;\n  getEmojiSource = () => this.emojiSource;\n  getHyphenationCallback = () => this.hyphenationCallback;\n  getRegisteredFontFamilies = () => Object.keys(this.fontFamilies);\n}\nexport { FontStore as default };","map":{"version":3,"names":["fontkit","PDFFont","STANDARD_FONTS","StandardFont","name","src","fullName","familyName","subfamilyName","postscriptName","copyright","version","underlinePosition","underlineThickness","italicAngle","bbox","hhea","numGlyphs","characterSet","availableFeatures","type","constructor","open","encode","str","layout","encoded","positions","glyphs","map","g","i","glyph","getGlyph","parseInt","advanceWidth","reduce","acc","p","stringIndices","_","script","language","direction","features","advanceHeight","undefined","glyphForCodePoint","codePoint","id","codePoints","isLigature","font","characterToGlyph","_font","hasGlyphForCodePoint","ascent","capHeight","xHeight","descent","lineGap","unitsPerEm","stringsForGlyph","Error","glyphsForString","widthOfGlyph","getAvailableFeatures","createSubset","getVariation","getFont","getName","setDefaultLanguage","fetchFont","options","response","fetch","data","arrayBuffer","Uint8Array","isDataUrl","dataUrl","header","split","hasDataPrefix","substring","hasBase64Prefix","FontSource","fontFamily","fontStyle","fontWeight","loadResultPromise","_load","includes","raw","uint8Array","atob","c","charCodeAt","create","headers","body","method","buffer","load","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","resolveFontWeight","value","sortByFontWeight","a","b","FontFamily","family","sources","register","numericFontWeight","push","resolve","descriptor","styleSources","filter","s","exactFit","find","leftOffset","rightOffset","fit","length","lt","sort","gt","FontStore","fontFamilies","emojiSource","fonts","hyphenationCallback","registerEmojiSource","registerHyphenationCallback","callback","reset","keys","Object","key","j","fontSource","clear","getRegisteredFonts","getEmojiSource","getHyphenationCallback","getRegisteredFontFamilies","default"],"sources":["/home/devdisnovo/Documentos/PROYECTOS/merci/node_modules/@react-pdf/font/lib/index.browser.js"],"sourcesContent":["import 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\n\n// @ts-expect-error ts being silly\nconst STANDARD_FONTS = [\n    'Courier',\n    'Courier-Bold',\n    'Courier-Oblique',\n    'Courier-BoldOblique',\n    'Helvetica',\n    'Helvetica-Bold',\n    'Helvetica-Oblique',\n    'Helvetica-BoldOblique',\n    'Times-Roman',\n    'Times-Bold',\n    'Times-Italic',\n    'Times-BoldItalic',\n];\nclass StandardFont {\n    name;\n    src;\n    fullName;\n    familyName;\n    subfamilyName;\n    postscriptName;\n    copyright;\n    version;\n    underlinePosition;\n    underlineThickness;\n    italicAngle;\n    bbox;\n    'OS/2';\n    hhea;\n    numGlyphs;\n    characterSet;\n    availableFeatures;\n    type;\n    constructor(src) {\n        this.name = src;\n        this.fullName = src;\n        this.familyName = src;\n        this.subfamilyName = src;\n        this.type = 'STANDARD';\n        this.postscriptName = src;\n        this.availableFeatures = [];\n        this.copyright = '';\n        this.version = 1;\n        this.underlinePosition = -100;\n        this.underlineThickness = 50;\n        this.italicAngle = 0;\n        this.bbox = {};\n        this['OS/2'] = {};\n        this.hhea = {};\n        this.numGlyphs = 0;\n        this.characterSet = [];\n        this.src = PDFFont.open(null, src);\n    }\n    encode(str) {\n        return this.src.encode(str);\n    }\n    layout(str) {\n        const [encoded, positions] = this.encode(str);\n        const glyphs = encoded.map((g, i) => {\n            const glyph = this.getGlyph(parseInt(g, 16));\n            glyph.advanceWidth = positions[i].advanceWidth;\n            return glyph;\n        });\n        const advanceWidth = positions.reduce((acc, p) => acc + p.advanceWidth, 0);\n        return {\n            positions,\n            stringIndices: positions.map((_, i) => i),\n            glyphs,\n            script: 'latin',\n            language: 'dflt',\n            direction: 'ltr',\n            features: {},\n            advanceWidth,\n            advanceHeight: 0,\n            bbox: undefined,\n        };\n    }\n    glyphForCodePoint(codePoint) {\n        const glyph = this.getGlyph(codePoint);\n        glyph.advanceWidth = 400;\n        return glyph;\n    }\n    getGlyph(id) {\n        return {\n            id,\n            codePoints: [id],\n            isLigature: false,\n            name: this.src.font.characterToGlyph(id),\n            _font: this.src,\n            // @ts-expect-error assign proper value\n            advanceWidth: undefined,\n        };\n    }\n    hasGlyphForCodePoint(codePoint) {\n        return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n    }\n    // Based on empirical observation\n    get ascent() {\n        return 900;\n    }\n    // Based on empirical observation\n    get capHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 650;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 550;\n            default:\n                return 690;\n        }\n    }\n    // Based on empirical observation\n    get xHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 440;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 390;\n            default:\n                return 490;\n        }\n    }\n    // Based on empirical observation\n    get descent() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return -220;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return -230;\n            default:\n                return -200;\n        }\n    }\n    get lineGap() {\n        return 0;\n    }\n    get unitsPerEm() {\n        return 1000;\n    }\n    stringsForGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    glyphsForString() {\n        throw new Error('Method not implemented.');\n    }\n    widthOfGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    getAvailableFeatures() {\n        throw new Error('Method not implemented.');\n    }\n    createSubset() {\n        throw new Error('Method not implemented.');\n    }\n    getVariation() {\n        throw new Error('Method not implemented.');\n    }\n    getFont() {\n        throw new Error('Method not implemented.');\n    }\n    getName() {\n        throw new Error('Method not implemented.');\n    }\n    setDefaultLanguage() {\n        throw new Error('Method not implemented.');\n    }\n}\n\nconst fetchFont = async (src, options) => {\n    const response = await fetch(src, options);\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data);\n};\nconst isDataUrl = (dataUrl) => {\n    const header = dataUrl.split(',')[0];\n    const hasDataPrefix = header.substring(0, 5) === 'data:';\n    const hasBase64Prefix = header.split(';')[1] === 'base64';\n    return hasDataPrefix && hasBase64Prefix;\n};\nclass FontSource {\n    src;\n    fontFamily;\n    fontStyle;\n    fontWeight;\n    data;\n    options;\n    loadResultPromise;\n    constructor(src, fontFamily, fontStyle, fontWeight, options) {\n        this.src = src;\n        this.fontFamily = fontFamily;\n        this.fontStyle = fontStyle || 'normal';\n        this.fontWeight = fontWeight || 400;\n        this.data = null;\n        this.options = options || {};\n        this.loadResultPromise = null;\n    }\n    async _load() {\n        const { postscriptName } = this.options;\n        let data = null;\n        if (STANDARD_FONTS.includes(this.src)) {\n            data = new StandardFont(this.src);\n        }\n        else if (isDataUrl(this.src)) {\n            const raw = this.src.split(',')[1];\n            const uint8Array = new Uint8Array(atob(raw)\n                .split('')\n                .map((c) => c.charCodeAt(0)));\n            data = fontkit.create(uint8Array, postscriptName);\n        }\n        else {\n            const { headers, body, method = 'GET' } = this.options;\n            const buffer = await fetchFont(this.src, { method, body, headers });\n            data = fontkit.create(buffer, postscriptName);\n        }\n        if (data && 'fonts' in data) {\n            throw new Error('Font collection is not supported');\n        }\n        this.data = data;\n    }\n    async load() {\n        if (this.loadResultPromise === null) {\n            this.loadResultPromise = this._load();\n        }\n        return this.loadResultPromise;\n    }\n}\n\nconst FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900,\n};\nconst resolveFontWeight = (value) => {\n    return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontFamily {\n    family;\n    sources;\n    static create(family) {\n        return new FontFamily(family);\n    }\n    constructor(family) {\n        this.family = family;\n        this.sources = [];\n    }\n    register({ src, fontWeight, fontStyle, ...options }) {\n        const numericFontWeight = fontWeight\n            ? resolveFontWeight(fontWeight)\n            : undefined;\n        this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n    }\n    resolve(descriptor) {\n        const { fontWeight = 400, fontStyle = 'normal' } = descriptor;\n        const styleSources = this.sources.filter((s) => s.fontStyle === fontStyle);\n        const exactFit = styleSources.find((s) => s.fontWeight === fontWeight);\n        if (exactFit)\n            return exactFit;\n        // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n        let font = null;\n        const numericFontWeight = resolveFontWeight(fontWeight);\n        if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n            const leftOffset = styleSources.filter((s) => s.fontWeight <= numericFontWeight);\n            const rightOffset = styleSources.filter((s) => s.fontWeight > 500);\n            const fit = styleSources.filter((s) => s.fontWeight >= numericFontWeight && s.fontWeight < 500);\n            font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n        }\n        const lt = styleSources\n            .filter((s) => s.fontWeight < numericFontWeight)\n            .sort(sortByFontWeight);\n        const gt = styleSources\n            .filter((s) => s.fontWeight > numericFontWeight)\n            .sort(sortByFontWeight);\n        if (numericFontWeight < 400) {\n            font = lt[lt.length - 1] || gt[0];\n        }\n        if (numericFontWeight > 500) {\n            font = gt[0] || lt[lt.length - 1];\n        }\n        if (!font) {\n            throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}, fontStyle ${fontStyle}`);\n        }\n        return font;\n    }\n}\n\nclass FontStore {\n    fontFamilies = {};\n    emojiSource = null;\n    constructor() {\n        this.register({\n            family: 'Helvetica',\n            fonts: [\n                { src: 'Helvetica', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Helvetica-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Helvetica-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Helvetica-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Courier',\n            fonts: [\n                { src: 'Courier', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Courier-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Courier-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Courier-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Times-Roman',\n            fonts: [\n                { src: 'Times-Roman', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Times-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Times-Italic', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Times-BoldItalic', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        // For backwards compatibility\n        this.register({\n            family: 'Helvetica-Bold',\n            src: 'Helvetica-Bold',\n        });\n        this.register({\n            family: 'Helvetica-Oblique',\n            src: 'Helvetica-Oblique',\n        });\n        this.register({\n            family: 'Helvetica-BoldOblique',\n            src: 'Helvetica-BoldOblique',\n        });\n        this.register({\n            family: 'Courier-Bold',\n            src: 'Courier-Bold',\n        });\n        this.register({\n            family: 'Courier-Oblique',\n            src: 'Courier-Oblique',\n        });\n        this.register({\n            family: 'Courier-BoldOblique',\n            src: 'Courier-BoldOblique',\n        });\n        this.register({\n            family: 'Times-Bold',\n            src: 'Times-Bold',\n        });\n        this.register({\n            family: 'Times-Italic',\n            src: 'Times-Italic',\n        });\n        this.register({\n            family: 'Times-BoldItalic',\n            src: 'Times-BoldItalic',\n        });\n        // Load default fonts\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 700,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 700,\n        });\n    }\n    hyphenationCallback = null;\n    register = (data) => {\n        const { family } = data;\n        if (!this.fontFamilies[family]) {\n            this.fontFamilies[family] = FontFamily.create(family);\n        }\n        // Bulk loading\n        if ('fonts' in data) {\n            for (let i = 0; i < data.fonts.length; i += 1) {\n                const { src, fontStyle, fontWeight, ...options } = data.fonts[i];\n                this.fontFamilies[family].register({\n                    src,\n                    fontStyle,\n                    fontWeight,\n                    ...options,\n                });\n            }\n        }\n        else {\n            const { src, fontStyle, fontWeight, ...options } = data;\n            this.fontFamilies[family].register({\n                src,\n                fontStyle,\n                fontWeight,\n                ...options,\n            });\n        }\n    };\n    registerEmojiSource = (emojiSource) => {\n        this.emojiSource = emojiSource;\n    };\n    registerHyphenationCallback = (callback) => {\n        this.hyphenationCallback = callback;\n    };\n    getFont = (descriptor) => {\n        const { fontFamily } = descriptor;\n        if (!this.fontFamilies[fontFamily]) {\n            throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n        }\n        return this.fontFamilies[fontFamily].resolve(descriptor);\n    };\n    load = async (descriptor) => {\n        const font = this.getFont(descriptor);\n        if (font)\n            await font.load();\n    };\n    reset = () => {\n        const keys = Object.keys(this.fontFamilies);\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            for (let j = 0; j < this.fontFamilies[key].sources.length; j++) {\n                const fontSource = this.fontFamilies[key].sources[j];\n                fontSource.data = null;\n            }\n        }\n    };\n    clear = () => {\n        this.fontFamilies = {};\n    };\n    getRegisteredFonts = () => this.fontFamilies;\n    getEmojiSource = () => this.emojiSource;\n    getHyphenationCallback = () => this.hyphenationCallback;\n    getRegisteredFontFamilies = () => Object.keys(this.fontFamilies);\n}\n\nexport { FontStore as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}